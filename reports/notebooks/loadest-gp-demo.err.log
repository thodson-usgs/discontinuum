Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from loadest_gp.providers import usgs

# download covariates (daily streamflow)
daily = usgs.get_daily(site=site, start_date=start_date, end_date=end_date)

# download target (concentration)
samples = usgs.get_samples(site=site, 
                           start_date=start_date, 
                           end_date=end_date, 
                           characteristic=characteristic, 
                           fraction=fraction)

samples
------------------

----- stderr -----
/home/runner/work/discontinuum/discontinuum/src/loadest_gp/providers/usgs.py:255: UserWarning: Censored values have been removed from the dataset.
  warnings.warn(
------------------

[31m---------------------------------------------------------------------------[39m
[31mKeyError[39m                                  Traceback (most recent call last)
[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pandas/core/indexes/base.py:3812[39m, in [36mIndex.get_loc[39m[34m(self, key)[39m
[32m   3811[39m [38;5;28;01mtry[39;00m:
[32m-> [39m[32m3812[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43m_engine[49m[43m.[49m[43mget_loc[49m[43m([49m[43mcasted_key[49m[43m)[49m
[32m   3813[39m [38;5;28;01mexcept[39;00m [38;5;167;01mKeyError[39;00m [38;5;28;01mas[39;00m err:

[36mFile [39m[32mpandas/_libs/index.pyx:167[39m, in [36mpandas._libs.index.IndexEngine.get_loc[39m[34m()[39m

[36mFile [39m[32mpandas/_libs/index.pyx:196[39m, in [36mpandas._libs.index.IndexEngine.get_loc[39m[34m()[39m

[36mFile [39m[32mpandas/_libs/hashtable_class_helper.pxi:7088[39m, in [36mpandas._libs.hashtable.PyObjectHashTable.get_item[39m[34m()[39m

[36mFile [39m[32mpandas/_libs/hashtable_class_helper.pxi:7096[39m, in [36mpandas._libs.hashtable.PyObjectHashTable.get_item[39m[34m()[39m

[31mKeyError[39m: 'parameter_cd'

The above exception was the direct cause of the following exception:

[31mKeyError[39m                                  Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[4][39m[32m, line 7[39m
[32m      4[39m daily = usgs.get_daily(site=site, start_date=start_date, end_date=end_date)
[32m      6[39m [38;5;66;03m# download target (concentration)[39;00m
[32m----> [39m[32m7[39m samples = [43musgs[49m[43m.[49m[43mget_samples[49m[43m([49m[43msite[49m[43m=[49m[43msite[49m[43m,[49m[43m [49m
[32m      8[39m [43m                           [49m[43mstart_date[49m[43m=[49m[43mstart_date[49m[43m,[49m[43m [49m
[32m      9[39m [43m                           [49m[43mend_date[49m[43m=[49m[43mend_date[49m[43m,[49m[43m [49m
[32m     10[39m [43m                           [49m[43mcharacteristic[49m[43m=[49m[43mcharacteristic[49m[43m,[49m[43m [49m
[32m     11[39m [43m                           [49m[43mfraction[49m[43m=[49m[43mfraction[49m[43m)[49m
[32m     13[39m samples

[36mFile [39m[32m~/work/discontinuum/discontinuum/src/loadest_gp/providers/usgs.py:346[39m, in [36mget_samples[39m[34m(site, start_date, end_date, characteristic, fraction, provider, name, filter_pcodes, **kwargs)[39m
[32m    343[39m [38;5;28;01melse[39;00m:
[32m    344[39m     pcode = [38;5;28;01mNone[39;00m
[32m--> [39m[32m346[39m ds = [43mformat_wqp_samples[49m[43m([49m[43mdf[49m[43m,[49m[43m [49m[43mname[49m[43m,[49m[43m [49m[43mpcode[49m[43m)[49m
[32m    348[39m [38;5;28;01mif[39;00m provider == [33m"[39m[33mNWIS[39m[33m"[39m:
[32m    349[39m     [38;5;66;03m# strip the "USGS-" prefix from the site number[39;00m
[32m    350[39m     site_id = site[[32m5[39m:]

[36mFile [39m[32m~/work/discontinuum/discontinuum/src/loadest_gp/providers/usgs.py:261[39m, in [36mformat_wqp_samples[39m[34m(df, name, pcode)[39m
[32m    255[39m     warnings.warn(
[32m    256[39m         [33m"[39m[33mCensored values have been removed from the dataset.[39m[33m"[39m,
[32m    257[39m         stacklevel=[32m1[39m,
[32m    258[39m         )
[32m    260[39m [38;5;28;01mif[39;00m pcode:
[32m--> [39m[32m261[39m     attrs = [43mget_parameters[49m[43m([49m[43m{[49m[43mname[49m[43m:[49m[43m [49m[43mpcode[49m[43m}[49m[43m)[49m
[32m    262[39m     ds[name].attrs = attrs.[34m__dict__[39m
[32m    264[39m [38;5;28;01mreturn[39;00m ds

[36mFile [39m[32m~/work/discontinuum/discontinuum/src/loadest_gp/providers/usgs.py:85[39m, in [36mget_parameters[39m[34m(pcodes)[39m
[32m     81[39m params = []
[32m     82[39m [38;5;28;01mfor[39;00m _, row [38;5;129;01min[39;00m df.iterrows():
[32m     83[39m     params.append(
[32m     84[39m         USGSParameter(
[32m---> [39m[32m85[39m             pcode=[43mrow[49m[43m[[49m[33;43m"[39;49m[33;43mparameter_cd[39;49m[33;43m"[39;49m[43m][49m,
[32m     86[39m             standard_name=lookup_name[row[[33m"[39m[33mparameter_cd[39m[33m"[39m]],
[32m     87[39m             long_name=row[[33m"[39m[33mSRSName[39m[33m"[39m],
[32m     88[39m             units=row[[33m"[39m[33mparm_unit[39m[33m"[39m],
[32m     89[39m         )
[32m     90[39m     )
[32m     92[39m [38;5;28;01mif[39;00m [38;5;28mlen[39m(params) == [32m1[39m:
[32m     93[39m     params = params[[32m0[39m]

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pandas/core/series.py:1130[39m, in [36mSeries.__getitem__[39m[34m(self, key)[39m
[32m   1127[39m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m._values[key]
[32m   1129[39m [38;5;28;01melif[39;00m key_is_scalar:
[32m-> [39m[32m1130[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43m_get_value[49m[43m([49m[43mkey[49m[43m)[49m
[32m   1132[39m [38;5;66;03m# Convert generator to list before going through hashable part[39;00m
[32m   1133[39m [38;5;66;03m# (We will iterate through the generator there to check for slices)[39;00m
[32m   1134[39m [38;5;28;01mif[39;00m is_iterator(key):

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pandas/core/series.py:1246[39m, in [36mSeries._get_value[39m[34m(self, label, takeable)[39m
[32m   1243[39m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m._values[label]
[32m   1245[39m [38;5;66;03m# Similar to Index.get_value, but we do not fall back to positional[39;00m
[32m-> [39m[32m1246[39m loc = [38;5;28;43mself[39;49m[43m.[49m[43mindex[49m[43m.[49m[43mget_loc[49m[43m([49m[43mlabel[49m[43m)[49m
[32m   1248[39m [38;5;28;01mif[39;00m is_integer(loc):
[32m   1249[39m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m._values[loc]

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pandas/core/indexes/base.py:3819[39m, in [36mIndex.get_loc[39m[34m(self, key)[39m
[32m   3814[39m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(casted_key, [38;5;28mslice[39m) [38;5;129;01mor[39;00m (
[32m   3815[39m         [38;5;28misinstance[39m(casted_key, abc.Iterable)
[32m   3816[39m         [38;5;129;01mand[39;00m [38;5;28many[39m([38;5;28misinstance[39m(x, [38;5;28mslice[39m) [38;5;28;01mfor[39;00m x [38;5;129;01min[39;00m casted_key)
[32m   3817[39m     ):
[32m   3818[39m         [38;5;28;01mraise[39;00m InvalidIndexError(key)
[32m-> [39m[32m3819[39m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(key) [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01merr[39;00m
[32m   3820[39m [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m:
[32m   3821[39m     [38;5;66;03m# If we have a listlike key, _check_indexing_error will raise[39;00m
[32m   3822[39m     [38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise[39;00m
[32m   3823[39m     [38;5;66;03m#  the TypeError.[39;00m
[32m   3824[39m     [38;5;28mself[39m._check_indexing_error(key)

[31mKeyError[39m: 'parameter_cd'

